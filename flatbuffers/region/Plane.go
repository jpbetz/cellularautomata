// automatically generated by the FlatBuffers compiler, do not modify

package region

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Plane struct {
	_tab flatbuffers.Table
}

func GetRootAsPlane(buf []byte, offset flatbuffers.UOffsetT) *Plane {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Plane{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Plane) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Plane) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Plane) W() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Plane) MutateW(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Plane) H() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Plane) MutateH(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Plane) Tiles(obj *Tile, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Plane) TilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PlaneStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PlaneAddW(builder *flatbuffers.Builder, w int32) {
	builder.PrependInt32Slot(0, w, 0)
}
func PlaneAddH(builder *flatbuffers.Builder, h int32) {
	builder.PrependInt32Slot(1, h, 0)
}
func PlaneAddTiles(builder *flatbuffers.Builder, tiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(tiles), 0)
}
func PlaneStartTilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PlaneEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
